
main      -> SteamCode                                 {% single() %}                                 

SteamCode -> null                                      {% object('SteamCode', (obj, d) => obj.statements = [])%}
           | StatementList                             {% object('SteamCode', (obj, d) => obj.statements = d[0])%}

StatementList -> Empty
               | Statement                             
               | Statement StatementList               {% recursion() %}    

Statement -> Declaration                               {% single() %}
           | Expression                                {% single() %}
StatementEnd -> S:? NL | ";"

Declaration -> "Foo"                                    {% object('Declaration', (obj, d) => obj.name = d[0]) %}

Expression -> "Bar"                                     {% object('Expression', (obj, d) => obj.name = d[0]) %}


Empty -> (S | NL):+                      {% ignore %}
 
S -> [ \t]:+			                 {% string("S", 0) %}
NL -> "\n" | "\r\n"                      {% string("NL", 0) %}
               



@{%

	function wrapErrors(type, code) {
		return function(d, location, reject) {
			try {
				return code(d, location, reject);
			} catch (e) {
				throw new Error("Error in " + type + "( at " + location + ")" + ": " + e);
			}
		}
	}
	
	function ignore(d, location, reject) {
		return reject;
	}
	
	function string(type, index) {
		return wrapErrors(type, function(d) {
			var value = d[index]; 
			if (Array.isArray(value)) {
				value = value.join('');
			}
			return value;
		})
	}
	
	
	function token(type, index) {
		return wrapErrors(type, function (d, location) {
			return {
				type: type,
				location: location,
				value: d[index].join("")
			}
		});
	}
	
	function object(type, mapValues) {
		return wrapErrors(type, function(d, location) {
			var object = {
				type: type,
				location: location
			}
			mapValues(object, d);
			return object;
		});
	}
	
	function rightRecursion() {
		return wrapErrors('rightRecursion', function(d) {
			var left
		});
	}

	function single(type) {
		return wrapErrors(type, function(d) {
			if (d.length > 1) {
				throw new Error('Ambiguity delected: ' + d);
			}
			return d[0];
		});
	}	
	
	function recursion(type) {
		return wrapErrors(type, function(d){
			var list = [];
			for(var i = 0; i < d.length; i++) {
				var value = d[i];
				if (Array.isArray(value)) {
					list = list.concat(value);
				} else {
					list.push(value);
				}
			}
			return list;
		});
	}
	
%}

